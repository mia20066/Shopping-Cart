{"ast":null,"code":"var _excluded = [\"className\", \"cssModule\", \"children\", \"toggle\", \"tag\", \"wrapTag\", \"closeAriaLabel\", \"close\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n\n  /** Add custom class */\n  className: PropTypes.string,\n\n  /** Custom close button */\n  close: PropTypes.object,\n  closeAriaLabel: PropTypes.string,\n\n  /** Change underlying component's CSS base class name */\n  cssModule: PropTypes.object,\n\n  /** Set a custom element for this component */\n  tag: tagPropType,\n\n  /** Function to be triggered when close button is clicked */\n  toggle: PropTypes.func,\n  wrapTag: tagPropType\n};\nvar defaultProps = {\n  tag: 'h5',\n  wrapTag: 'div',\n  closeAriaLabel: 'Close'\n};\n\nfunction ModalHeader(props) {\n  var closeButton;\n\n  var className = props.className,\n      cssModule = props.cssModule,\n      children = props.children,\n      toggle = props.toggle,\n      Tag = props.tag,\n      WrapTag = props.wrapTag,\n      closeAriaLabel = props.closeAriaLabel,\n      close = props.close,\n      attributes = _objectWithoutProperties(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, 'modal-header'), cssModule);\n\n  if (!close && toggle) {\n    closeButton =\n    /*#__PURE__*/\n    React.createElement(\"button\", {\n      type: \"button\",\n      onClick: toggle,\n      className: mapToCssModules('btn-close', cssModule),\n      \"aria-label\": closeAriaLabel\n    });\n  }\n\n  return (\n    /*#__PURE__*/\n    React.createElement(WrapTag, _extends({}, attributes, {\n      className: classes\n    }),\n    /*#__PURE__*/\n    React.createElement(Tag, {\n      className: mapToCssModules('modal-title', cssModule)\n    }, children), close || closeButton)\n  );\n}\n\nModalHeader.propTypes = propTypes;\nModalHeader.defaultProps = defaultProps;\nexport default ModalHeader;","map":null,"metadata":{},"sourceType":"module"}